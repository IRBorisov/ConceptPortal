///////////////////////////////////////////////////////////
// ------------- Generator Definitions --------------------
///////////////////////////////////////////////////////////
@detectDelim
@external propSource highlighting from "./highlight"

///////////////////////////////////////////////////////////
// ------------- Precedence Definitions --------------------
///////////////////////////////////////////////////////////
@precedence {
  plus @left minus @left,
  times @left,
  not @right,
  log_equiv @left,
  log_impl @left,
  log_or @left,
  log_and @left,
  set_decart @left set_union @left set_intersect @left set_minus @left set_symminus @left,
  set_bool @right,
  quant @right,
  p1, p2
}

///////////////////////////////////////////////////////////
// ------------- Terminal Tokens --------------------------
///////////////////////////////////////////////////////////
@tokens {
  space             { @whitespace+ }
  ComplexIndex      { $[1-9]$[0-9]*(","$[1-9]$[0-9]*)* }
  integer           { $[0-9]+ }
  emptySet          { "∅" }
  integerSet        { "Z" }

  bigPr             { "Pr" }
  smallPr           { "pr" }
  Filter            { "Fi" }
  card              { "card" }
  bool              { "bool" }
  debool            { "debool" }
  red               { "red" }

  Global            { $[XCSDAT]$[0-9]+ }
  Function          { "F"$[0-9]+ }
  Predicate         { "P"$[0-9]+ }
  Radical           { "R"$[0-9]+ }
  local             { $[_a-zα-ω]($[a-zα-ω])* }
  PrefixR           { "R" }
  PrefixI           { "I" }
  PrefixD           { "D" }

  "¬"
  "∀" "∃" "⇔" "⇒" "∨" "&"
  "ℬ"
  "+" "-" "*" "∪" "\\" "∆" "∩" "×"
  "∈" "∉" "⊆" "⊄" "⊂" ">" "≥" "≤" "<" "≠" "="
  ":∈" ":="

  ";" "|"
  "[" "]"
  "{" "}"
  "(" ")"
  
  @precedence {
    Filter
    bigPr
    Predicate
    Function
    Global
    Radical
    PrefixR
    PrefixI
    PrefixD
  }
  @precedence {
    card
    bool
    debool
    red
    smallPr
    local
  }
}

@skip { space }


///////////////////////////////////////////////////////////////////////////////
// ------------------------- Grammar Rules ------------------------------------
///////////////////////////////////////////////////////////////////////////////

// ------------------------- Language Expression ------------------------------
@top Expression {
  logic_or_setexpr |
  function_decl
}
logic_or_setexpr	{
  logic |
  setexpr
}
function_decl {
  "[" arguments "]" logic_or_setexpr
}


// -------------------------  Variables and arguments -------------------------
arguments {
  declaration |
  arguments "," declaration
}
declaration {
  Local "∈" setexpr
}
Local { 
  !p1 local |
  !p2 local Index
}
Index {
  integer
}
variable {
  Local |
  tuple
}
variable_pack {
  variable |
  variable_pack "," variable
}


// ------------------------- Logic Expressions --------------------------------
logic {
  logic_predicates |
  logic_unary |
  logic_binary |
  "(" logic ")"
}

logic_predicates {
  variable ":∈" setexpr |
  variable ":=" setexpr |
  setexpr "∈" setexpr |
  setexpr "∉" setexpr |
  setexpr "⊆" setexpr |
  setexpr "⊄" setexpr |
  setexpr "⊂" setexpr |
  setexpr ">" setexpr |
  setexpr "≥" setexpr |
  setexpr "<" setexpr |
  setexpr "≤" setexpr |
  setexpr "≠" setexpr |
  setexpr "=" setexpr
}

logic_unary {
  !not "¬" logic |
  Predicate "[" setexpr_enum "]" |
  "∀" variable_pack "∈" setexpr !quant logic |
  "∃" variable_pack "∈" setexpr !quant logic
}

logic_binary {
  logic !log_equiv "⇔" logic |
  logic !log_impl "⇒" logic |
  logic !log_or "∨" logic |
  logic !log_and "&" logic
}


// ------------------------- Set Expressions ----------------------------------
setexpr {
  Literal |
  identifier |
  setexpr_binary |
  setexpr_generators |
  Function "[" setexpr_enum "]" |
  TextFunction "(" setexpr ")"
}
TextFunction {
  bigPr ComplexIndex |
  smallPr ComplexIndex |
  card |
  bool |
  debool |
  red
}
setexpr_enum {
  setexpr |
  setexpr_enum_min2
}
setexpr_enum_min2 {
  setexpr_enum "," setexpr
}

Literal {
  integer |
  emptySet |
  integerSet
}
identifier {
  Local |
  Global |
  Radical
}

setexpr_binary {
  setexpr !plus "+" setexpr |
  setexpr !minus "-" setexpr |
  setexpr !times "*" setexpr |
  setexpr !set_union "∪" setexpr |
  setexpr !set_minus "\\" setexpr |
  setexpr !set_symminus "∆" setexpr |
  setexpr !set_intersect "∩" setexpr |
  setexpr !set_decart "×" setexpr |
  "(" setexpr_binary ")"
}

setexpr_generators {
  enumeration |
  tuple |
  boolean |
  filter_expression |
  declarative |
  imperative |
  recursion
}
enumeration {
  "{" setexpr_enum "}"
}
tuple {
  "(" setexpr_enum_min2 ")"
}
boolean {
  !set_bool "ℬ" "(" setexpr ")" |
  !set_bool "ℬ" boolean
}
filter_expression {
  Filter ComplexIndex "[" setexpr_enum "]" "(" setexpr ")"
}

declarative {
  "{" Local "∈" setexpr "|" logic "}" |
  PrefixD "{" variable "∈" setexpr "|" logic "}"
}
recursion {
  PrefixR "{" variable ":=" setexpr ("|" logic)? "|" setexpr "}"
}
imperative {
  PrefixI "{" setexpr "|" imp_blocks "}"
}
imp_blocks {
  logic |
  imp_blocks ";" logic
}
